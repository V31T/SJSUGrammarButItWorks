# Generated from SQL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,253,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,5,32,226,
        8,32,10,32,12,32,229,9,32,1,33,4,33,232,8,33,11,33,12,33,233,1,34,
        4,34,237,8,34,11,34,12,34,238,1,35,1,35,5,35,243,8,35,10,35,12,35,
        246,9,35,1,35,1,35,1,36,1,36,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,
        6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,
        13,13,1,0,48,57,3,0,10,10,13,13,39,39,3,0,9,10,13,13,32,32,256,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,
        0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,
        92,1,0,0,0,19,95,1,0,0,0,21,98,1,0,0,0,23,101,1,0,0,0,25,108,1,0,
        0,0,27,115,1,0,0,0,29,122,1,0,0,0,31,127,1,0,0,0,33,134,1,0,0,0,
        35,141,1,0,0,0,37,146,1,0,0,0,39,151,1,0,0,0,41,157,1,0,0,0,43,165,
        1,0,0,0,45,169,1,0,0,0,47,175,1,0,0,0,49,182,1,0,0,0,51,191,1,0,
        0,0,53,195,1,0,0,0,55,199,1,0,0,0,57,207,1,0,0,0,59,212,1,0,0,0,
        61,216,1,0,0,0,63,219,1,0,0,0,65,223,1,0,0,0,67,231,1,0,0,0,69,236,
        1,0,0,0,71,240,1,0,0,0,73,249,1,0,0,0,75,76,5,40,0,0,76,2,1,0,0,
        0,77,78,5,41,0,0,78,4,1,0,0,0,79,80,5,44,0,0,80,6,1,0,0,0,81,82,
        5,61,0,0,82,8,1,0,0,0,83,84,5,42,0,0,84,10,1,0,0,0,85,86,5,60,0,
        0,86,87,5,62,0,0,87,12,1,0,0,0,88,89,5,60,0,0,89,14,1,0,0,0,90,91,
        5,62,0,0,91,16,1,0,0,0,92,93,5,60,0,0,93,94,5,61,0,0,94,18,1,0,0,
        0,95,96,5,62,0,0,96,97,5,61,0,0,97,20,1,0,0,0,98,99,5,33,0,0,99,
        100,5,61,0,0,100,22,1,0,0,0,101,102,5,67,0,0,102,103,5,82,0,0,103,
        104,5,69,0,0,104,105,5,65,0,0,105,106,5,84,0,0,106,107,5,69,0,0,
        107,24,1,0,0,0,108,109,5,83,0,0,109,110,5,69,0,0,110,111,5,76,0,
        0,111,112,5,69,0,0,112,113,5,67,0,0,113,114,5,84,0,0,114,26,1,0,
        0,0,115,116,5,73,0,0,116,117,5,78,0,0,117,118,5,83,0,0,118,119,5,
        69,0,0,119,120,5,82,0,0,120,121,5,84,0,0,121,28,1,0,0,0,122,123,
        5,68,0,0,123,124,5,82,0,0,124,125,5,79,0,0,125,126,5,80,0,0,126,
        30,1,0,0,0,127,128,5,68,0,0,128,129,5,69,0,0,129,130,5,76,0,0,130,
        131,5,69,0,0,131,132,5,84,0,0,132,133,5,69,0,0,133,32,1,0,0,0,134,
        135,5,85,0,0,135,136,5,80,0,0,136,137,5,68,0,0,137,138,5,65,0,0,
        138,139,5,84,0,0,139,140,5,69,0,0,140,34,1,0,0,0,141,142,5,73,0,
        0,142,143,5,78,0,0,143,144,5,84,0,0,144,145,5,79,0,0,145,36,1,0,
        0,0,146,147,5,70,0,0,147,148,5,82,0,0,148,149,5,79,0,0,149,150,5,
        77,0,0,150,38,1,0,0,0,151,152,5,87,0,0,152,153,5,72,0,0,153,154,
        5,69,0,0,154,155,5,82,0,0,155,156,5,69,0,0,156,40,1,0,0,0,157,158,
        5,80,0,0,158,159,5,82,0,0,159,160,5,73,0,0,160,161,5,77,0,0,161,
        162,5,65,0,0,162,163,5,82,0,0,163,164,5,89,0,0,164,42,1,0,0,0,165,
        166,5,75,0,0,166,167,5,69,0,0,167,168,5,89,0,0,168,44,1,0,0,0,169,
        170,5,84,0,0,170,171,5,65,0,0,171,172,5,66,0,0,172,173,5,76,0,0,
        173,174,5,69,0,0,174,46,1,0,0,0,175,176,5,86,0,0,176,177,5,65,0,
        0,177,178,5,76,0,0,178,179,5,85,0,0,179,180,5,69,0,0,180,181,5,83,
        0,0,181,48,1,0,0,0,182,183,5,68,0,0,183,184,5,65,0,0,184,185,5,84,
        0,0,185,186,5,65,0,0,186,187,5,66,0,0,187,188,5,65,0,0,188,189,5,
        83,0,0,189,190,5,69,0,0,190,50,1,0,0,0,191,192,5,83,0,0,192,193,
        5,69,0,0,193,194,5,84,0,0,194,52,1,0,0,0,195,196,5,73,0,0,196,197,
        5,78,0,0,197,198,5,84,0,0,198,54,1,0,0,0,199,200,5,86,0,0,200,201,
        5,65,0,0,201,202,5,82,0,0,202,203,5,67,0,0,203,204,5,72,0,0,204,
        205,5,65,0,0,205,206,5,82,0,0,206,56,1,0,0,0,207,208,5,68,0,0,208,
        209,5,65,0,0,209,210,5,84,0,0,210,211,5,69,0,0,211,58,1,0,0,0,212,
        213,5,65,0,0,213,214,5,78,0,0,214,215,5,68,0,0,215,60,1,0,0,0,216,
        217,5,79,0,0,217,218,5,82,0,0,218,62,1,0,0,0,219,220,5,88,0,0,220,
        221,5,79,0,0,221,222,5,82,0,0,222,64,1,0,0,0,223,227,7,0,0,0,224,
        226,7,1,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,
        228,1,0,0,0,228,66,1,0,0,0,229,227,1,0,0,0,230,232,7,2,0,0,231,230,
        1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,68,1,
        0,0,0,235,237,7,3,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,
        0,0,0,238,239,1,0,0,0,239,70,1,0,0,0,240,244,5,39,0,0,241,243,8,
        4,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,
        0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,39,0,0,248,72,1,
        0,0,0,249,250,7,5,0,0,250,251,1,0,0,0,251,252,6,36,0,0,252,74,1,
        0,0,0,5,0,227,233,238,244,1,0,1,0
    ]

class SQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    CREATE = 12
    SELECT = 13
    INSERT = 14
    DROP = 15
    DELETE = 16
    UPDATE = 17
    INTO = 18
    FROM = 19
    WHERE = 20
    PRIMARY = 21
    KEY = 22
    TABLE = 23
    VALUES = 24
    DATABASE = 25
    SET = 26
    INT = 27
    VARCHAR = 28
    DATE = 29
    AND = 30
    OR = 31
    XOR = 32
    ID = 33
    NEWLINE = 34
    INT_LITERAL = 35
    STRING_LITERAL = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'='", "'*'", "'<>'", "'<'", "'>'", "'<='", 
            "'>='", "'!='", "'CREATE'", "'SELECT'", "'INSERT'", "'DROP'", 
            "'DELETE'", "'UPDATE'", "'INTO'", "'FROM'", "'WHERE'", "'PRIMARY'", 
            "'KEY'", "'TABLE'", "'VALUES'", "'DATABASE'", "'SET'", "'INT'", 
            "'VARCHAR'", "'DATE'", "'AND'", "'OR'", "'XOR'" ]

    symbolicNames = [ "<INVALID>",
            "CREATE", "SELECT", "INSERT", "DROP", "DELETE", "UPDATE", "INTO", 
            "FROM", "WHERE", "PRIMARY", "KEY", "TABLE", "VALUES", "DATABASE", 
            "SET", "INT", "VARCHAR", "DATE", "AND", "OR", "XOR", "ID", "NEWLINE", 
            "INT_LITERAL", "STRING_LITERAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "CREATE", "SELECT", "INSERT", 
                  "DROP", "DELETE", "UPDATE", "INTO", "FROM", "WHERE", "PRIMARY", 
                  "KEY", "TABLE", "VALUES", "DATABASE", "SET", "INT", "VARCHAR", 
                  "DATE", "AND", "OR", "XOR", "ID", "NEWLINE", "INT_LITERAL", 
                  "STRING_LITERAL", "WS" ]

    grammarFileName = "SQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


